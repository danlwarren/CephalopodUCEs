head(vxx)
vxx.sim.2 <- function(buy.threshold, sell.threshold){
money <- 100
shares <- 0
buy.counter <- 0
sell.counter <- 0
bought.price <- 1721.6
sold.price <- 1731.2
for(i in 2:(nrow(vxx)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if((vxx[i, "CLOSE"] - bought.price)/bought.price > sell.threshold & shares > 0){
# Sell
money <- shares * vxx[i+1, "OPEN"]
shares <- 0
sell.counter <- sell.counter + 1
sold.price <- vxx[i +1, "OPEN"]
}
if((vxx[i, "CLOSE"] - sold.price)/sold.price < buy.threshold & money > 0){
# Buy
shares <- money/vxx[i+1, "OPEN"]
money <- 0
buy.counter <- buy.counter + 1
bought.price <- vxx[i+1, "OPEN"]
}
}
results <- list(mult = (shares * vxx[i, "OPEN"]),
buys = buy.counter,
sells = sell.counter)
return(results)
}
buys <- seq(-10, -0.5, .5)
sells <- seq(0.5, 10, .5)
max.return <- 0
max.values <- 0
for(i in buys){
for(j in sells){
results <- vxx.sim.2(i, j)
if(results$mult > max.return){
max.values <- list(buy = i,
sell = j,
results = results)
}
print(paste0("buy: ", i, " sell: ", j, " money: ", results$mult,
" n.buys: ", results$buys, " n.sells: ", results$sells ))
}
}
vxx.sim.2 <- function(buy.threshold, sell.threshold){
money <- 0
shares <- 1
buy.counter <- 0
sell.counter <- 0
bought.price <- 1721.6
sold.price <- 1731.2
for(i in 2:(nrow(vxx)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if((vxx[i, "CLOSE"] - bought.price)/bought.price > sell.threshold & shares > 0){
# Sell
money <- shares * vxx[i+1, "OPEN"]
shares <- 0
sell.counter <- sell.counter + 1
sold.price <- vxx[i +1, "OPEN"]
}
if((vxx[i, "CLOSE"] - sold.price)/sold.price < buy.threshold & money > 0){
# Buy
shares <- money/vxx[i+1, "OPEN"]
money <- 0
buy.counter <- buy.counter + 1
bought.price <- vxx[i+1, "OPEN"]
}
}
results <- list(mult = (shares * vxx[i, "OPEN"]),
buys = buy.counter,
sells = sell.counter)
return(results)
}
buys <- seq(-10, -0.5, .5)
sells <- seq(0.5, 10, .5)
max.return <- 0
max.values <- 0
for(i in buys){
for(j in sells){
results <- vxx.sim.2(i, j)
if(results$mult > max.return){
max.values <- list(buy = i,
sell = j,
results = results)
}
print(paste0("buy: ", i, " sell: ", j, " money: ", results$mult,
" n.buys: ", results$buys, " n.sells: ", results$sells ))
}
}
vxx.sim <- function(buy.threshold, sell.threshold){
money <- 100
shares <- 0
buy.counter <- 0
sell.counter <- 0
for(i in 2:(nrow(vxx)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if(vxx[i, "PCTCHG"] > sell.threshold & shares > 0){
# Sell
money <- shares * vxx[i+1, "OPEN"]
shares <- 0
sell.counter <- sell.counter + 1
}
if(vxx[i, "PCTCHG"] < buy.threshold & money > 0){
# Buy
shares <- money/vxx[i+1, "OPEN"]
money <- 0
buy.counter <- buy.counter + 1
}
}
results <- list(mult = (shares * vxx[i, "OPEN"]),
buys = buy.counter,
sells = sell.counter)
return(results)
}
buys <- seq(-10, -0.5, .5)
sells <- seq(0.5, 10, .5)
max.return <- 0
max.values <- 0
for(i in buys){
for(j in sells){
results <- vxx.sim(i, j)
if(results$mult > max.return){
max.values <- list(buy = i,
sell = j,
results = results)
}
print(paste0("buy: ", i, " sell: ", j, " money: ", results$mult,
" n.buys: ", results$buys, " n.sells: ", results$sells ))
}
}
print(max.values)
gold.sim <- function(buy.threshold, sell.threshold){
money <- 100
shares <- 0
buy.counter <- 0
sell.counter <- 0
for(i in 2:(nrow(gold)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if(gold[i, "PCTCHG"] > sell.threshold & shares > 0){
# Sell
money <- shares * gold[i+1, "OPEN"]
shares <- 0
sell.counter <- sell.counter + 1
}
if(gold[i, "PCTCHG"] < buy.threshold & money > 0){
# Buy
shares <- money/gold[i+1, "OPEN"]
money <- 0
buy.counter <- buy.counter + 1
}
}
results <- list(mult = (shares * gold[i, "OPEN"]),
buys = buy.counter,
sells = sell.counter)
return(results)
}
buys <- seq(-10, -0.5, .5)
sells <- seq(0.5, 10, .5)
for(i in buys){
for(j in sells){
results <- gold.sim(i, j)
print(paste0("buy: ", i, " sell: ", j, " money: ", results$mult,
" n.buys: ", results$buys, " n.sells: ", results$sells ))
}
}
vxz <- read.csv("~/Downloads/vxz.csv")
head(vxz)
library(dplyr)
colnames(vxz) <- c("DATE", "CLOSE", "VOLUME", "OPEN", "HIGH", "LOW")
vxz$PCTCHG <- ((vxz$CLOSE - lag(vxz$CLOSE)) * 100)/lag(vxz$CLOSE)
vxz <- vxz[complete.cases(vxz),]
vxz.sim <- function(buy.threshold, sell.threshold){
money <- 100
shares <- 0
buy.counter <- 0
sell.counter <- 0
for(i in 2:(nrow(vxz)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if(vxz[i, "PCTCHG"] > sell.threshold & shares > 0){
# Sell
money <- shares * vxz[i+1, "OPEN"]
shares <- 0
sell.counter <- sell.counter + 1
}
if(vxz[i, "PCTCHG"] < buy.threshold & money > 0){
# Buy
shares <- money/vxz[i+1, "OPEN"]
money <- 0
buy.counter <- buy.counter + 1
}
}
results <- list(mult = (shares * vxz[i, "OPEN"]),
buys = buy.counter,
sells = sell.counter)
return(results)
}
buys <- seq(-10, -0.5, .5)
sells <- seq(0.5, 10, .5)
max.return <- 0
max.values <- 0
for(i in buys){
for(j in sells){
results <- vxz.sim(i, j)
if(results$mult > max.return){
max.values <- list(buy = i,
sell = j,
results = results)
}
print(paste0("buy: ", i, " sell: ", j, " money: ", results$mult,
" n.buys: ", results$buys, " n.sells: ", results$sells ))
}
}
print(max.values)
vxx <- read.csv("~/Downloads/vxx.csv")
head(vxx)
library(dplyr)
colnames(vxx) <- c("DATE", "CLOSE", "VOLUME", "OPEN", "HIGH", "LOW")
vxx$PCTCHG <- ((vxx$CLOSE - lag(vxx$CLOSE)) * 100)/lag(vxx$CLOSE)
vxx <- vxx[complete.cases(vxx),]
vxx.sim <- function(buy.threshold, sell.threshold){
money <- 100
shares <- 0
buy.counter <- 0
sell.counter <- 0
for(i in 2:(nrow(vxx)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if(vxx[i, "PCTCHG"] > sell.threshold & shares > 0){
# Sell
money <- shares * vxx[i+1, "OPEN"]
shares <- 0
sell.counter <- sell.counter + 1
}
if(vxx[i, "PCTCHG"] < buy.threshold & money > 0){
# Buy
shares <- money/vxx[i+1, "OPEN"]
money <- 0
buy.counter <- buy.counter + 1
}
}
results <- list(mult = (shares * vxx[i, "OPEN"]),
buys = buy.counter,
sells = sell.counter)
return(results)
}
buys <- seq(-10, -0.5, .5)
sells <- seq(0.5, 10, .5)
max.return <- 0
max.values <- 0
for(i in buys){
for(j in sells){
results <- vxx.sim(i, j)
if(results$mult > max.return){
max.values <- list(buy = i,
sell = j,
results = results)
}
print(paste0("buy: ", i, " sell: ", j, " money: ", results$mult,
" n.buys: ", results$buys, " n.sells: ", results$sells ))
}
}
print(max.values)
vix <- read.csv("~/Downloads/VIX_History_FULL.csv")
head(vix)
library(dplyr)
vix$PCTCHG <- ((vix$CLOSE - lag(vix$CLOSE)) * 100)/lag(vix$CLOSE)
vix <- vix[complete.cases(vix),]
vix.sim <- function(buy.threshold, sell.threshold){
money <- 0
shares <- 100
for(i in 2:(nrow(vix)-2)){
# print(paste0("Day", i, " money: ", money, " shares: ", shares))
if(vix[i, "PCTCHG"] > sell.threshold & shares > 0){
# Sell
money <- shares * vix[i+1, "OPEN"]
shares <- 0
}
if(vix[i, "PCTCHG"] < buy.threshold & money > 0){
# Buy
shares <- money/vix[i+1, "OPEN"]
money <- 0
}
}
return(shares * vix[i, "OPEN"])
}
buys <- -1:-10
sells <- 1:10
for(i in buys){
for(j in sells){
print(paste0("buy: ", i, " sell: ", j, " money: ", vix.sim(i, j)))
}
}
install.packages("robis")
library(robis)
help("robis")
taxon("Cephalopoda")
dataset(taxonid = 11707)
cephdata <- dataset(taxonid = 11707)
colnames(cephdata)
cephdata$url
cephoccs <- occurrence(taxonid = 11707)
cephoccs$depth
write.csv(cephoccs, "~/Downloads/cephoccs.csv")
colnames(cephoccs)
cephoccs$maximumDepthInMeters
cephoccs %>%
group_by(family) %>%
mutate(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test <- cephoccs %>%
group_by(family) %>%
mutate(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
dplyr::last_dplyr_warnings()
test$max.depth
test <- cephoccs %>%
group_by(family) %>%
mutate(max.depth = max(family = family,
maximumDepthInMeters, na.rm = TRUE))
test
length(unique(cephoccs$family))
test <- cephoccs %>%
group_by(family) %>%
mutate(family = family,
max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test
test <- cephoccs %>%
group_by(family) %>%
summarise(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test
tail(test)
test <- cephoccs %>%
select(family, maximumDepthInMeters) %>%
complete.cases() %>%
group_by(family) %>%
summarise(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test <- cephoccs %>%
select(family, maximumDepthInMeters) %>%
select(which(complete.cases())) %>%
group_by(family) %>%
summarise(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test <- cephoccs %>%
select(family, maximumDepthInMeters) %>%
filter(which(complete.cases())) %>%
group_by(family) %>%
summarise(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test <- cephoccs %>%
select(family, maximumDepthInMeters) %>%
filter(complete.cases(.)) %>%
group_by(family) %>%
summarise(max.depth = max(maximumDepthInMeters, na.rm = TRUE))
test
min(test$max.depth)
cephoccs$behavior
unique(cephoccs$behavior)
cephoccs$minimumDepthInMeters
depths <- cephoccs %>%
select(family, maximumDepthInMeters, minimumDepthInMeters) %>%
filter(complete.cases(.)) %>%
group_by(family) %>%
summarise(max.depth = max(maximumDepthInMeters, na.rm = TRUE),
min.depth = min(minimumDepthInMeters, na.rm = TRUE))
depths
write.csv(depths, "depths.csv")
hist(depths$min.depth)
hist(depths$max.depth)
depths$min.depth
depths <- cephoccs %>%
select(family, maximumDepthInMeters, minimumDepthInMeters) %>%
filter(complete.cases(.)) %>%
group_by(family) %>%
summarise(max.depth = max(abs(maximumDepthInMeters, na.rm = TRUE)),
min.depth = min(abs(minimumDepthInMeters, na.rm = TRUE)))
help(abs)
depths <- cephoccs %>%
select(family, maximumDepthInMeters, minimumDepthInMeters) %>%
filter(complete.cases(.)) %>%
group_by(family) %>%
summarise(max.depth = max(abs(maximumDepthInMeters), na.rm = TRUE),
min.depth = min(abs(minimumDepthInMeters), na.rm = TRUE))
depths
hist(depths$min.depth)
hist(depths(max.depth))
hist(depths$max.depth)
depths <- cephoccs %>%
select(family, maximumDepthInMeters, minimumDepthInMeters) %>%
filter(complete.cases(.)) %>%
group_by(family) %>%
summarise(max.depth = max(abs(maximumDepthInMeters), na.rm = TRUE),
min.depth = min(abs(minimumDepthInMeters), na.rm = TRUE))
write.csv(depths, "depths.csv")
setwd("~/GitHub/CephalopodUCEs/6_phylogenetic_analysis")
# Load necessary libraries
library(ape)
library(tidyverse)
# Read the tree file
treeo <- read.tree("gcf.cf.branch")
treeo$tip.label
setwd("~/GitHub/CephalopodUCEs/7_trait_data")
# Create a lookup table for the new labels
label_lookup <- setNames(concordance_data$new_label, as.character(concordance_data$ID))
# Read the CSV file
concordance_data <- read_csv("concordance_vectors.csv")
setwd("~/GitHub/CephalopodUCEs/6_phylogenetic_analysis")
# Read the CSV file
concordance_data <- read_csv("concordance_vectors.csv")
# Prepare the label information
concordance_data <- concordance_data %>%
mutate(new_label = paste0(ID, ":g", gene_psi1, ",s", site_psi1, ",q", quartet_psi1))
# Create a lookup table for the new labels
label_lookup <- setNames(concordance_data$new_label, as.character(concordance_data$ID))
# Assign new labels to node labels
tree$node.label <- sapply(tree$node.label, function(x) {
new_label <- label_lookup[as.character(x)]
if(is.na(new_label)) return(x) else return(new_label)
})
tree <- treeo
# Assign new labels to node labels
tree$node.label <- sapply(tree$node.label, function(x) {
new_label <- label_lookup[as.character(x)]
if(is.na(new_label)) return(x) else return(new_label)
})
tree$tip.label
library(ape)
library(tidyverse)
setwd("~/GitHub/CephalopodUCEs/7_trait_data")
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tree$tip.label
tips <- tree$tip.label
help(gsub)
help(strsplit)
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
wm_records_taxamatch(tips[1])
tips[1]
wm_records_name(tips[1])
test <- wm_records_name(tips[1])
test$family
species.df <- wm_records_name(tips)
species.df <- wm_records_names(tips)
species.df
species.df <- unlist(species.df)
species.df
species.df <- apply(tips, function(x) wm_records_name())
species.df <- apply(tips, function(x) wm_records_name(x))
help(apply)
species.df <- sapply(tips, function(x) wm_records_name(x))
help(wm_records_name)
wm_records_names(tips)
species.df <- wm_records_names(tips)
species.df <- do.call(rbind.data.frame, species.df)
species.df
wm_records_name("discoteuthis_sp")
wm_records_name("discoteuthis")
tips <- sapply(tips, function(x) strsplit(x, "_")[[1]])
tips
tips <- sapply(tips, function(x) strsplit(x, "_")[1])
tips
tips <- sapply(tips, function(x) strsplit(x, "-+")[1])
tips
tips <- gsub("--genome", "", tips)
tips
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
tips <- sapply(tips, function(x) strsplit(x, "_")[1])
tips <- gsub("--genome", "", tips)
tips
help)gsub
help(gsub)
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
tips <- sapply(tips, function(x) strsplit(x, "_")[1])
tips <- gsub("\-\-genome", "", tips)
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
tips <- sapply(tips, function(x) strsplit(x, "_")[1])
tips <- gsub("--genome", '', tips)
tips
gsub("--", "", "sepia--genome")
gsub("--genome", "", "sepia--genome")
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
tips <- unlist(sapply(tips, function(x) strsplit(x, "_")[1]))
tips <- gsub("--genome", '', tips)
tips
names(tips) <- NULL
tips
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
genera <- unlist(sapply(tips, function(x) strsplit(x, "_")[1]))
genera <- gsub("--genome", '', genera)
genera
names(genera) <- NULL
family.df <- wm_records_names(genera)
genus.records <- wm_records_names(genera)
genus.records <- do.call(rbind.data.frame, genus.records)
family.df <- data.frame(tips.name = tips,
genus = genera,
famil = genus.records$family)
dim(genus.records)
length(tips)
tree <- read.tree("../6_phylogenetic_analysis/astral_species.tree")
tips <- tree$tip.label
genera <- unlist(sapply(tips, function(x) strsplit(x, "_")[1]))
length(genera)
genera
genera <- unlist(sapply(tips, function(x) strsplit(x, "_")[[1]][1]))
genera
length(genera)
genera <- gsub("--genome", '', genera)
names(genera) <- NULL
genera
genus.records <- wm_records_names(genera)
